services:
  # MySQL 서비스들
  user_mysql:
    image: mysql:8.0.36
    restart: always
    container_name: user_mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: miso0805
      MYSQL_DATABASE: user
      MYSQL_USER: cow
      MYSQL_PASSWORD: miso0805
      TZ: Asia/Seoul

  order_mysql:
    image: mysql:8.0.36
    restart: always
    container_name: order_mysql
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: miso0805
      MYSQL_DATABASE: orders
      MYSQL_USER: cow
      MYSQL_PASSWORD: miso0805
      TZ: Asia/Seoul

  product_mysql:
    image: mysql:8.0.36
    restart: always
    container_name: product_mysql
    ports:
      - "3309:3306"
    environment:
      MYSQL_ROOT_PASSWORD: miso0805
      MYSQL_DATABASE: product
      MYSQL_USER: cow
      MYSQL_PASSWORD: miso0805
      TZ: Asia/Seoul

  quantity_mysql:
    image: mysql:8.0.36
    restart: always
    container_name: quantity_mysql
    ports:
      - "3300:3306"
    environment:
      MYSQL_ROOT_PASSWORD: miso0805
      MYSQL_DATABASE: quantity
      MYSQL_USER: cow
      MYSQL_PASSWORD: miso0805
      TZ: Asia/Seoul    

  quantity-redis:
    image: redis
    restart: always
    container_name: quantity-redis
    ports:
      - "6370:6379"

  user-redis:
    image: redis
    restart: always
    container_name: user-redis
    ports:
      - "6380:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc -w 2 zookeeper 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  kafka:
    image: confluentinc/cp-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://127.0.0.1:29092
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc -w 2 kafka 9092 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 2

  discovery-service:
    image: 'alreadycow/discovery-service'
    ports:
      - "8761:8761"
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 kafka 9092"]
      interval: 10s
      timeout: 5s
      retries: 2

  apigateway-service:
    image: 'alreadycow/apigateway-service'
    ports:
      - "8000:8000"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 discovery-service 8761"]
      interval: 10s
      timeout: 5s
      retries: 2  

  user-service:
    image: 'alreadycow/user-service'
    ports:
      - "8083:8083"
    environment:
      - spring.datasource.url=jdbc:mysql://user_mysql:3306/user
      - spring.data.redis.host=user-redis
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    depends_on:
      - apigateway-service
      - discovery-service
      - user_mysql
      - user-redis
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 user-service 8083"]
      interval: 10s
      timeout: 5s
      retries: 4

  product-service:
    image: 'alreadycow/product-service'
    ports:
      - "8082:8082"
    environment:
      - spring.datasource.url=jdbc:mysql://product_mysql:3306/product
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    depends_on:
      - kafka
      - apigateway-service
      - discovery-service
      - product_mysql
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 product-service 8082"]
      interval: 10s
      timeout: 5s
      retries: 4

  order-service:
    image: 'alreadycow/order-service'
    ports:
      - "8081:8081"
    environment:
      - spring.datasource.url=jdbc:mysql://order_mysql:3306/orders
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    depends_on:
      - kafka
      - apigateway-service
      - discovery-service
      - order_mysql
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 order-service 8081"]
      interval: 10s
      timeout: 5s
      retries: 4
  
  quantity-service:
    image: 'alreadycow/quantity-service'
    ports:
      - "8084:8084"
    environment:
      - spring.datasource.url=jdbc:mysql://quantity_mysql:3306/quantity
      - spring.data.redis.host=quantity-redis
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    depends_on:
      - kafka
      - apigateway-service
      - discovery-service
      - quantity_mysql
      - quantity-redis
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 quantity-service 8084"]
      interval: 10s
      timeout: 5s
      retries: 4

#   ngrinder-controller:
#     container_name: ngrinder-controller-arm

#     build:
#       context: ./ngrinder-controller
#       dockerfile: Dockerfile
#     restart: always
#     ports:
#       - "8080:8080"
#       - "12000-12009:12000-12009"
#       - "16001:16001"
#     networks:
#       - ngrinder

#   ngrinder-agent:
#     container_name: ngrinder-agent-arm
#     depends_on:
#       - ngrinder-controller
#     build:
#       context: ./ngrinder-agent
#       dockerfile: Dockerfile
#     restart: always

#     networks:
#       - ngrinder
      
# networks:
#   ngrinder:
#     driver: bridge
